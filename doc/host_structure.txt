host
⤷  socket_host_state
    ⤷  active sockets
    ⤷  local endpoints
    ⤷  bound receivers (hello, cookie, initiate and message)
        ⤷ hello, initiate receivers forward to kex_responder
        ⤷ cookie receiver forwards to kex_initiator
        ⤷ message receiver forwards to message_receiver which references all host channels
⤷  kex_host_state
    ⤷  key exchange initiators by endpoint/nonce
⤷  identity_host_state
    ⤷  create/load/maintain host EID(s)
⤷  stream_host_state
    ⤷  [owns] responder to listen for incoming stream server connections
        ⤷ responder should not maintain any state,
           * only _answer HELLO packets_
           * and _create channels_ in reponse to proper INITIATE packets
           * created channel is bound to message_receiver.
    ⤷  [owns] list of peers by their EID(s): stream_peer
        ⤷ channels are direct children of stream peer: [owns] channels_
        ⤷ a list of streams established or establishing with this peer: [owns] all_streams_
        ⤷ [owns] initiator(s) to create outgoing client connections
            * initiator _maintains negotiation state_
            * and _creates channels_ when negotiation completes successfully.
⤷  asio_host_state
    ⤷  io_service access
⤷  timer_host_state
    ⤷  virtualization of time and timers
⤷  routing_host_state
    ⤷  peer network maintenance
    ⤷  peer discovery


When first `sss::server` is created, it instantiates `kex_responder` and binds `hello`, `initiate` magics to it.
When outgoing connection is made `kex_initiator` is created and bound to `cookie` magic.
Handler for `message` magic is always present but operates only when valid channel id is found in packet.

Each channel within it contains per-channel decongesion state. Multiple channels may be created with different decongestion schemes and compete for bandwidth.

Since key exchange does NOT create local state until the final approval phase, we spawn peer and
corresponding channel from key exchange upon success.

Initial setup only creates host and packet receivers responsible for key exchange handling. These
handlers will spawn new peers and channels as necessary.

Routing coordinator protocol is a level above, it uses combination of techniques to discover
potential peer nodes.

```
struct host
{
    struct socket_host_state
    {
        list<socket> sockets_;
    }
    struct kex_host_state 
    {
        list<kex_initiator> initiators_;
    }
    struct stream_host_state 
    {
        list<responder> responders_ = { hello, cookie, initiate, message };
        list<stream_peer> peers_;
    }
}

// our peer has multiple permanent IDs, but for channels we use temporary IDs
// need to map a multitude of temporary IDs to a single peer
// in here, stream_peer only represents a SINGLE permanent ID, with multiple temporary IDs
// initiated towards this permanent ID
// temporary IDs are existing only as long as corresponding channel exists
// once channel is closed the temp key vanishes. channels_.keys() lists all existing temp IDs.

struct stream_peer
{
    peer_identity remote_id_;
    map<key_string, channel> channels_; // map from peer temp public keys to channels
    list<stream> streams_;
    routing::coordinator& peer_database_; // [unowned] locator for peer EIDs
}
```

stream ack range is represented in framing layer as (ofs,len) pairs waiting in relation to
packet ACK, when the packet is acked, the ofs-len range is acked to the stream.
stream's tx_queue_ contains packets together with tx_byte_seq (ofs) and size (len) data.


