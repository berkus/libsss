To connect to the other side:

ssu::stream* stream;
stream->connect_to(eid, service, protocol, ep_hint);
stream->connect_at(additional_ep);...

To accept connections from the other side:

ssu::server* server;
server->listen(service, service_desc, protocol, protocol_desc);
and server->accept() in the on_new_connection signals.
(bind server to the signal handler, as it is not provided)

server->on_new_connection.connect(boost::bind(&handle_connection, server));

void handle_connection(server* s)
{
    while ((stream* stream = s->accept()))
    {
        // ...do something with the stream.
    }
}

Send works like this:

stream->send
+--channel->send
   +--

Receive works like this:

udp_link
+---link->receive
    +---link_channel->receive for non-0 channel
        emit on_received
    or
    +---link_receiver->receive for 0 init channel
        key_responder->receive
